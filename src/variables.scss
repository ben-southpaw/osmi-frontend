@use 'sass:math';
/* Variables and mixins declared here will be available in all other SCSS files */
$header-and-footer-height: 3rem;
$header-and-footer-padding: 0.5rem;
// $header-and-footer-margin: 0.5rem;
$main-padding: 2rem;

//Breakpoints/size:
$breakpoint-mobile: 375px;
$breakpoint-small: '(max-width: 899px)';
$breakpoint-large: 1440px;
$breakpoint-xlarge: '(min-width: 1500px)';
$screen-width: 100vw;

// //Theme Colours:
// $Pink: #e494dc;
// $Blue: #b8e2ff;
// $Green: #b5d99c;
// $Orange: #ffad69;

//css vars
// $mask-size: 80em;

@mixin responsive-scale-single-direction(
	$scale-min,
	$scale-max,
	$screen-min,
	$screen-max,
	$limit-scale: true,
	$vertical: false
) {
	$unit: if($vertical, 1vh, 1vw);
	$min-unit: if($vertical, 'min-height', 'min-width');

	--scale: #{$scale-min}px;
	min-height: $unit * 0;

	@media only screen and ($min-unit: calc($screen-min * 1px)) {
		--scale: calc(
			#{$scale-min}px + #{$scale-max - $scale-min} * (
					#{$unit * 100} - #{$screen-min}px
				) / #{$screen-max - $screen-min}
		);
	}

	@if ($limit-scale) {
		@media only screen and ($min-unit: calc($screen-max * 1px)) {
			--scale: #{$scale-max}px;
		}
	}
}

@mixin responsive-scale(
	$screen-min,
	$screen-max,
	$direction: 'both',
	$scale-min: math.div($screen-min, $screen-max),
	$scale-max: 1,
	$limit-scale: true,
	$aspect-ratio: math.div(1440, 705)
) {
	@include responsive-scale-single-direction(
		$scale-min,
		$scale-max,
		$screen-min,
		$screen-max,
		$limit-scale,
		$direction == 'vertical'
	);

	@if ($direction == 'both') {
		@media only screen and (min-aspect-ratio: #{math.round($aspect-ratio * 100)}/100) {
			@include responsive-scale-single-direction(
				$scale-min,
				$scale-max,
				math.div($screen-min, $aspect-ratio),
				math.div($screen-max, $aspect-ratio),
				$limit-scale,
				true
			);
		}
	}
}

@function uiscale($amount) {
	@return calc(#{$amount} * var(--scale));
}
